from numpy import ma
from sklearn.model_selection import GridSearchCV
import pandas as pd
from datetime import datetime
from sklearn.linear_model import LogisticRegression
from sklearn.impute import SimpleImputer
from sklearn.ensemble import RandomForestClassifier

# === Read the data
df_train = pd.read_csv("./train_data.csv")
df_test = pd.read_csv("./test_data.csv")

df_train["User_Behavior_Score"] = df_train["User_Behavior_Score"].fillna(
    df_train["User_Behavior_Score"].mean()
)
df_test["User_Behavior_Score"] = df_test["User_Behavior_Score"].fillna(
    df_test["User_Behavior_Score"].mean()
)
features_train = [
    "Suspicious_Port_Activity",
    "Traffic_Volume_Variation",
    "Packet_Length_Anomaly",
    "Malware_Score",
    "Threat_Level_Index",
    "User_Behavior_Score",
    "Geo_Dispersion",
    "Payload_Entropy",
    "Login_Attempts",
    "Device_Response_Time",
    "Session_Duration",
    "Packet_Retry_Rate",
    "Anomaly_Tendency",
]

features_test = [
    # "ID",
    # "Timestamp",
    "Suspicious_Port_Activity",
    "Traffic_Volume_Variation",
    "Packet_Length_Anomaly",
    "Malware_Score",
    "Threat_Level_Index",
    "User_Behavior_Score",
    "Geo_Dispersion",
    "Payload_Entropy",
    "Login_Attempts",
    "Device_Response_Time",
    "Session_Duration",
    "Packet_Retry_Rate",
    "Anomaly_Tendency",
]

X_train = df_train[features_train]
y_train = df_train["Attack Type"]
X_test = df_test[features_test]
idx = df_test["ID"]

# === Subtask 1
features_task_1 = [
    "ID",
    "Timestamp",
]
value_subtask1 = []  # subtask 1 answers
for index, row in df_test[features_task_1].iterrows():
    d = datetime.strptime(row["Timestamp"], "%Y-%m-%d %H:%M:%S")
    value_subtask1.append((row["ID"], d.hour))


task1 = pd.DataFrame(
    {"subtaskID": 1, "datapointID": id, "answer": ("PM" if hour >= 12 else "AM")}
    for id, hour in value_subtask1
)
print(task1.head())

# === Subtask 2
parameters = {
    "solver": ["newton-cg", "lbfgs", "liblinear", "sag", "saga"],
    "penalty": ["none", "elasticnet", "l1", "l2"],
    "C": [0.001, 0.01, 0.1, 1, 10, 100],
}
# model = LogisticRegression(max_iter=1000)
model = RandomForestClassifier(n_estimators=100, random_state=42)
grid_search = GridSearchCV(
    estimator=model, param_grid=parameters, scoring="accuracy", cv=5, verbose=0
)


grid_search.fit(X_train, y_train)
model = grid_search.best_estimator_
# model.fit(X_train, y_train)

y_pred = []  # Model predictions
y_pred = model.predict(X_test)

print(y_pred[:50])

print("!!! ! ! ! ![It predicted]")

task2 = pd.DataFrame(
    {"subtaskID": 2, "datapointID": id, "answer": y_pr} for id, y_pr in zip(idx, y_pred)
)

# # === Final datatset
submission_df = pd.concat([task1, task2], ignore_index=True)
submission_df.to_csv("final_submission.csv", index=False)
